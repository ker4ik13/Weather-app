{"ast":null,"code":"var _jsxFileName = \"/Users/ker4ik13/Desktop/web/pet projects/weather-app/src/App.js\";\nimport React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_KEY = '109440449518b43abeb4e646cc838d3f';\nconst API_KEY2 = '810a0e957bcf85b01abcb03335f6ba96';\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      temp: undefined,\n      weatherDesc: undefined,\n      feelsLike: undefined,\n      humidity: undefined,\n      pressure: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      city: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      visibility: undefined,\n      windSpeed: undefined,\n      error: undefined\n    };\n    this.gettingWeather = async () => {\n      const api_url_today = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=${API_KEY}&units=metric&lang=ru`);\n      const data = await api_url_today.json();\n      console.log(data);\n      let sunset = data.sys.sunset;\n      let dateSunset = new Date();\n      dateSunset.setTime(sunset);\n      let sunsetDate = dateSunset.getHours() + ':' + dateSunset.getMinutes();\n      let sunrise = data.sys.sunrise;\n      let dateSunrise = new Date();\n      dateSunrise.setTime(sunrise);\n      let sunriseDate = dateSunrise.getHours() + ':' + dateSunrise.getMinutes();\n      this.setState({\n        temp: Math.floor(data.main.temp),\n        weatherDesc: data.weather[0].description,\n        city: data.name,\n        tempMax: Math.floor(data.main.temp_max),\n        tempMin: Math.floor(data.main.temp_min),\n        feelsLike: Math.floor(data.main.feels_like),\n        humidity: data.main.humidity,\n        pressure: data.main.pressure,\n        sunrise: sunriseDate,\n        sunset: sunsetDate,\n        visibility: data.visibility,\n        windSpeed: Math.floor(data.wind.speed),\n        error: undefined\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        weather: this.gettingWeather,\n        city: this.state.city,\n        temp: this.state.temp,\n        weatherDesc: this.state.weatherDesc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        weather: this.gettingWeather,\n        tempMax: this.state.tempMax,\n        tempMin: this.state.tempMin,\n        weatherDesc: this.state.weatherDesc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        weather: this.gettingWeather,\n        feelsLike: this.state.feelsLike,\n        humidity: this.state.humidity,\n        pressure: this.state.pressure,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        visibility: this.state.visibility,\n        windSpeed: this.state.windSpeed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n}\n;\nexport default App;","map":{"version":3,"names":["React","Header","Main","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","API_KEY","API_KEY2","App","Component","constructor","arguments","state","temp","undefined","weatherDesc","feelsLike","humidity","pressure","tempMax","tempMin","city","sunrise","sunset","visibility","windSpeed","error","gettingWeather","api_url_today","fetch","data","json","console","log","sys","dateSunset","Date","setTime","sunsetDate","getHours","getMinutes","dateSunrise","sunriseDate","setState","Math","floor","main","weather","description","name","temp_max","temp_min","feels_like","wind","speed","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/ker4ik13/Desktop/web/pet projects/weather-app/src/App.js"],"sourcesContent":["import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\nconst API_KEY = '109440449518b43abeb4e646cc838d3f';\nconst API_KEY2 = '810a0e957bcf85b01abcb03335f6ba96'\n\nclass App extends React.Component{\n  state = {\n    temp: undefined,\n    weatherDesc: undefined,\n    feelsLike: undefined,\n    humidity: undefined,\n    pressure: undefined,\n    tempMax: undefined,\n    tempMin: undefined,\n    city: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    visibility: undefined,\n    windSpeed: undefined,\n    error: undefined,\n    }\n\n  gettingWeather = async () => {\n    const api_url_today = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=${API_KEY}&units=metric&lang=ru`);\n    const data = await api_url_today.json();\n    console.log(data);\n\n    let sunset = data.sys.sunset;\n    let dateSunset = new Date();\n    dateSunset.setTime(sunset);\n    let sunsetDate = dateSunset.getHours() + ':' + dateSunset.getMinutes();\n\n    let sunrise = data.sys.sunrise;\n    let dateSunrise = new Date();\n    dateSunrise.setTime(sunrise);\n    let sunriseDate = dateSunrise.getHours() + ':' + dateSunrise.getMinutes();\n\n    this.setState({\n      temp: Math.floor(data.main.temp),\n      weatherDesc: data.weather[0].description,\n      city: data.name,\n      tempMax: Math.floor(data.main.temp_max),\n      tempMin: Math.floor(data.main.temp_min),\n      feelsLike: Math.floor(data.main.feels_like),\n      humidity: data.main.humidity,\n      pressure: data.main.pressure,\n      sunrise: sunriseDate,\n      sunset: sunsetDate,\n      visibility: data.visibility,\n      windSpeed: Math.floor(data.wind.speed),\n      error: undefined,\n    })\n  }\n\n\n  render(){\n    return(\n      <><Header weather = {this.gettingWeather}\n      city = {this.state.city}\n      temp = {this.state.temp}\n      weatherDesc = {this.state.weatherDesc}/>\n\n      <Main weather = {this.gettingWeather}\n      tempMax = {this.state.tempMax}\n      tempMin = {this.state.tempMin}\n      weatherDesc = {this.state.weatherDesc}/>\n      \n      <Footer weather = {this.gettingWeather}\n      feelsLike = {this.state.feelsLike}\n      humidity = {this.state.humidity}\n      pressure = {this.state.pressure}\n      sunrise = {this.state.sunrise}\n      sunset = {this.state.sunset}\n      visibility = {this.state.visibility}\n      windSpeed = {this.state.windSpeed}/></>\n    )\n  }\n};\n\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}